@using UserManagement.Contracts.DTOS
@inject HttpClient HttpClient
@inject NavigationManager navigation
@page "/userList"

<h3>Users List</h3>

<div class="d-flex justify-content-start gap-2 mb-3">
     <a href="@("/addUser")" class="btn btn-primary float-end">
        Add User
    </a>

    <a href="@("/allLogs")"  class="btn btn-secondary float-end">
        All Logs 
    </a>
</div>

@if (FilteredUsers is null)
{
    <p><em>Loading...</em></p>
}
else
{
<div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Forename</th>
                    <th>Surname</th>
                    <th>D.O.B</th>
                    <th>Email</th>
                    <th>Account Active</th>
                    <th style="width: 1px;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in FilteredUsers)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Forename</td>
                        <td>@user.Surname</td>
                        <td>@user.DateOfBirth.ToShortDateString()</td>
                        <td>@user.Email</td>
                        <td>@(user.IsActive ? "Yes" : "No")</td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-default dropdown-toggle"
                                        @onclick="() => ToggleDropdown(user.Id)">
                                    Actions
                                </button>

                                @if (openDropdownId == user.Id)
                                {
                                    <ul class="dropdown-menu show">
                                        <li>
                                            <NavLink class="dropdown-item" @onclick="()=>ViewLogs(user.Id)">View</NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="dropdown-item" @onclick="()=>EditUser(user.Id)">Edit</NavLink>
                                        </li>
                                        <button class="dropdown-item text-danger"
                                            data-bs-toggle="modal"
                                            data-bs-target="@GetModalId(user)">
                                        Delete
                                        </button>   
                                    </ul>

                                }
                            </div>
                            <Delete user="@user" OnDeleted="HandleDelete" />

                        </td>
                    </tr>
                }
            </tbody>
        </table>

    <div>
           
        </div>
    </div>

    <div class="btn-group" role="group">
        <button class="btn btn-default" @onclick="ShowAll">Show All</button>
        <button class="btn btn-default" @onclick="ShowActive">Active Only</button>
        <button class="btn btn-default" @onclick="ShowInactive">Non Active</button>
    </div>
</div>
}

@code {
    private UserDto[]? users;
    private UserDto[]? FilteredUsers;
    private long? openDropdownId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch users from API
            users = await HttpClient.GetFromJsonAsync<UserDto[]>("/api/users");
            FilteredUsers = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

     private string GetModalId(UserDto user)
    {  
    return $"#{Delete.ModalId(user)}"; 
    }

    private void HandleDelete(long id)
{
    // remove from both original & filtered lists
    users = users?.Where(u => u.Id != id).ToArray();
    FilteredUsers = FilteredUsers?.Where(u => u.Id != id).ToArray();

    StateHasChanged(); // force UI refresh
}


    private void ToggleDropdown(long userId)
    {
        openDropdownId = openDropdownId == userId ? null : userId;
    }

    private void EditUser(long id)
    {
        navigation.NavigateTo($"/addUser/{id}"); 
    }

    private void ViewLogs(long id)
    {
        navigation.NavigateTo($"/viewLogs/{id}"); 
    }

    

    private void ShowAll() => FilteredUsers = users;
    private void ShowActive() => FilteredUsers = users?.Where(u => u.IsActive).ToArray();
    private void ShowInactive() => FilteredUsers = users?.Where(u => !u.IsActive).ToArray();
}
