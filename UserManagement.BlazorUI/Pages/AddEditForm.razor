@using UserManagement.Contracts.DTOS
@using UserManagement.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@page "/addUser"
@page "/addUser/{id:long}"

<div class="text-center">
    <h1 class="display-4">@((id > 0) ? "Edit User" : "Add User")</h1>
</div>

<div class="d-flex justify-content-start gap-2 mb-3">
   <a type="button" class="btn btn-secondary"href="/userList">Back</a>
</div>

<EditForm Model="@user" FormName="userForm" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" @bind="user!.Id" />

    <div class="mb-3">
        <label for="Forename">Forename</label>
        <InputText id="Forename" class="form-control" @bind-Value="user.Forename" />
    </div>

    <div class="mb-3">
        <label for="Surname">Surname</label>
        <InputText id="Surname" class="form-control" @bind-Value="user.Surname" />
    </div>

    <div class="mb-3">
        <label for="DateOfBirth">Date of Birth</label>
        <InputDate id="DateOfBirth" class="form-control" @bind-Value="user.DateOfBirth" />
    </div>

    <div class="mb-3">
        <label for="Email">Email</label>
        <InputText id="Email" class="form-control" type="email" @bind-Value="user.Email" />
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox id="IsActive" class="form-check-input" @bind-Value="user.IsActive" />
        <label class="form-check-label" for="IsActive">Account Active</label>
    </div>

    <button type="submit" class="btn btn-primary">@((id > 0) ? "Update" : "Submit")</button>
</EditForm>

@code {
    [Parameter]
    public long id { get; set; }

    public User user { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (id > 0)
        {
            try
            {
                user = await HttpClient.GetFromJsonAsync<User>($"/api/users/{id}")
                       ?? new User();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user: {ex.Message}");
                user = new User();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response;

            if (id > 0) // edit
            {
                response = await HttpClient.PutAsJsonAsync($"/api/users/{id}", user);
            }
            else // add
            {
                response = await HttpClient.PostAsJsonAsync("/api/users/add", user);
            }

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine(id > 0 ? "User updated successfully" : "User added successfully");
                NavigationManager.NavigateTo("userList");
            }
            else
            {
                Console.WriteLine($"Failed to save user: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving user: {ex.Message}");
        }
    }
}
