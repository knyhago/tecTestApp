@page "/viewLogs/{id:int}"
@using UserManagement.Contracts.DTOS
@using UserManagement.Data.Entities
@inject HttpClient Http

<h3>User Logs</h3>



@if (logs is null)
{
    <p><em>Loading...</em></p>
}
else if (!logs.Any())
{
    <p><em>No logs found for this user.</em></p>
}
else
{
 <div class="d-flex justify-content-start gap-2 mb-3">
   <a type="button" class="btn btn-secondary"href="/allLogs">Back</a>
</div>

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Action</th>
                <th>Details</th>
                <th>Performed By</th>
                <th>Timestamp</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logs.OrderByDescending(l => l.Timestamp))
            {
                <tr>
                    <td>@log.Action</td>
                    <td>@log.Details</td>
                    <td>@log.PerformedBy</td>
                    <td>@log.Timestamp</td>
                    <td> <a type="button" class="btn btn-primary"href="@($"/logDetails/{log.Id}")">Details</a></td>
    
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public int id { get; set; }

    private List<Log>? logs;

    protected override async Task OnParametersSetAsync()
    {
        // calls your API endpoint, e.g. /api/logs/user/{id}
       var log = await Http.GetFromJsonAsync<List<Log>>($"/api/logs/{id}");

        if(log is null)
        {
            throw new Exception("Logs are null for this user");
        }
        logs=log;

    }
}
