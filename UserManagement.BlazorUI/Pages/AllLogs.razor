@using UserManagement.Data.Entities
@page "/allLogs"
@inject HttpClient Http

<h3>All Logs</h3>

<div class="d-flex justify-content-start gap-2 mb-3">
   <a type="button" class="btn btn-secondary" href="/userList">Back</a>
</div>

@if (logs is null)
{
    <p><em>Loading...</em></p>
}
else if (!logs.Any())
{
    <p><em>No logs found.</em></p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Action</th>
                <th>Details</th>
                <th>Performed By</th>
                <th>Timestamp</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in PagedLogs)
            {
                <tr>
                    <td>@log.Action</td>
                    <td>@log.Details</td>
                    <td>@log.PerformedBy</td>
                    <td>@log.Timestamp</td>
                    <td>
                        <a class="btn btn-primary" href="@($"/viewLogs/{log.UserId}")">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Simple Pagination -->
    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
            </li>

            <li class="page-item disabled">
                <span class="page-link">Page @currentPage of @TotalPages</span>
            </li>

            <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    private List<Log>? logs;

    private int currentPage = 1;
    private int pageSize = 10;

    private IEnumerable<Log> PagedLogs =>
        logs!
            .OrderByDescending(l => l.Timestamp)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    private int TotalPages =>
        logs == null || logs.Count == 0
            ? 1
            : (int)Math.Ceiling((double)logs.Count / pageSize);

    private void GoToPage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        currentPage = page;
    }

    protected override async Task OnInitializedAsync()
    {
        logs = await Http.GetFromJsonAsync<List<Log>>("/api/logs");
    }
}
